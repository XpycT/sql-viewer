import{R as I}from"./react-CUxW9ASL.js";const _=r=>{let s;const t=new Set,o=(i,S)=>{const f=typeof i=="function"?i(s):i;if(!Object.is(f,s)){const v=s;s=S??(typeof f!="object"||f===null)?f:Object.assign({},s,f),t.forEach(d=>d(s,v))}},a=()=>s,u={setState:o,getState:a,getInitialState:()=>l,subscribe:i=>(t.add(i),()=>t.delete(i))},l=s=r(o,a,u);return u},R=r=>r?_(r):_,j=r=>r;function w(r,s=j){const t=I.useSyncExternalStore(r.subscribe,()=>s(r.getState()),()=>s(r.getInitialState()));return I.useDebugValue(t),t}const E=r=>{const s=R(r),t=o=>w(s,o);return Object.assign(t,s),t},N=r=>E;function x(r,s){let t;try{t=r()}catch{return}return{getItem:a=>{var n;const m=l=>l===null?null:JSON.parse(l,void 0),u=(n=t.getItem(a))!=null?n:null;return u instanceof Promise?u.then(m):m(u)},setItem:(a,n)=>t.setItem(a,JSON.stringify(n,void 0)),removeItem:a=>t.removeItem(a)}}const p=r=>s=>{try{const t=r(s);return t instanceof Promise?t:{then(o){return p(o)(t)},catch(o){return this}}}catch(t){return{then(o){return this},catch(o){return p(o)(t)}}}},F=(r,s)=>(t,o,a)=>{let n={storage:x(()=>localStorage),partialize:e=>e,version:0,merge:(e,g)=>({...g,...e}),...s},m=!1;const u=new Set,l=new Set;let i=n.storage;if(!i)return r((...e)=>{console.warn(`[zustand persist middleware] Unable to update item '${n.name}', the given storage is currently unavailable.`),t(...e)},o,a);const S=()=>{const e=n.partialize({...o()});return i.setItem(n.name,{state:e,version:n.version})},f=a.setState;a.setState=(e,g)=>{f(e,g),S()};const v=r((...e)=>{t(...e),S()},o,a);a.getInitialState=()=>v;let d;const b=()=>{var e,g;if(!i)return;m=!1,u.forEach(c=>{var h;return c((h=o())!=null?h:v)});const y=((g=n.onRehydrateStorage)==null?void 0:g.call(n,(e=o())!=null?e:v))||void 0;return p(i.getItem.bind(i))(n.name).then(c=>{if(c)if(typeof c.version=="number"&&c.version!==n.version){if(n.migrate)return[!0,n.migrate(c.state,c.version)];console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}else return[!1,c.state];return[!1,void 0]}).then(c=>{var h;const[H,O]=c;if(d=n.merge(O,(h=o())!=null?h:v),t(d,!0),H)return S()}).then(()=>{y==null||y(d,void 0),d=o(),m=!0,l.forEach(c=>c(d))}).catch(c=>{y==null||y(void 0,c)})};return a.persist={setOptions:e=>{n={...n,...e},e.storage&&(i=e.storage)},clearStorage:()=>{i==null||i.removeItem(n.name)},getOptions:()=>n,rehydrate:()=>b(),hasHydrated:()=>m,onHydrate:e=>(u.add(e),()=>{u.delete(e)}),onFinishHydration:e=>(l.add(e),()=>{l.delete(e)})},n.skipHydration||b(),d||v},k=F;export{x as a,N as c,k as p};
